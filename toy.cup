package syntax;

import lexer.*;
import java.io.*;
import java_cup.runtime.*;

parser code {:
    // Connect this parser to a scanner!
    private Toy lexer;
    private File file;
    
    public parser(File file) {
    	this();
    	this.file = file;
    	
    	try {
			lexer = new Toy( new FileReader( file ) );
			}
		catch ( IOException exception ) {
			throw new Error( "Unable to open file \"" + file + "\"" );
			}			
    	}
    	
    public Toy getToy(){
    	return lexer;
    }
    	
:}

/* define how to connect to the scanner! */
scan with {: return lexer.next_token(); :};

/* Terminals */
terminal            BOOLEAN, BREAK, CLASS, DOUBLE, ELSE, EXTENDS, FOR, IF;
terminal			IMPLEMENTS, INT, INTERFACE, NEW, NEWARRAY, NULL, PRINTLN;
terminal			READLN, RETURN, STRING, THIS, VOID, WHILE, PLUS, MINUS;
terminal			MULT, DIV, MOD, LESS, LESSEQ, GREATER, GREATEREQ, EQUAL;
terminal			NOTEQ, AND, OR, NOT, ASSIGNOP, SEMICOL, COMMA, PERIOD;
terminal			LEFTPAREN, RIGHTPAREN, LEFTBRACKET, RIGHTBRACKET;
terminal			LEFTBRACE, RIGHTBRACE, INTCONSTANT, DOUBLECONSTANT;
terminal			STRINGCONSTANT, BOOLEANCONSTANT, ID;

terminal LEFT, RIGHT, NEWLINE, TIMES, DIVIDE, ASSIGN;
terminal String NUMBER;
terminal String IDENT;

/* Non terminals */
nonterminal program, decl, StmtList, Stmt, numbers;
nonterminal Integer Expr, Term, Factor;
start with StmtList;

StmtList::= 
 
	|
		StmtList Stmt
	;
	
Stmt::= 
	IDENT:ident ASSIGN Expr:expr NEWLINE
{:
System.out.println("");
:}
|
Expr:expr NEWLINE
{:
System.out.print( expr.intValue() );
:}
|
error NEWLINE
|
NEWLINE
;
