package syntax;

import lexer.*;
import java.io.*;
import java_cup.runtime.*;

action code{:
	// User Generated Code

	// output the reductions and their production numbers
	// this assumes the Object is an INTeger and is used when RESULT
	// is being used to hold the production number.
	private String reduction(Object... reductions) {
		String str = "";
		for(Object i: reductions) {
			str += "[reduce " + i + "] ";
		}
		return str + "\n";
	}
	
	private String shift(Object... shifts) {
		String str = "";
		for(Object i: shifts) {
		str += i +  " [shift]\n";
		}
		
		return str;
	}
:}

parser code {:
    // Connect this parser to a scanner!
    private Toy lexer;
    private File file;
    
    public parser(File file) {
    	this();
    	this.file = file;
    	
    	try {
			lexer = new Toy( new FileReader( file ) );
		}
		catch ( IOException exception ) {
			throw new Error( "Unable to open file \"" + file + "\"" );
		}			
    }
    	
    public Toy getToy(){
    	return lexer;
    }
    	
:}

/* define how to connect to the scanner! */
scan with {: return lexer.next_token(); :};

/* Terminals */
terminal BOOLEAN, BREAK, CLASS, DOUBLE, ELSE, EXTENDS, FOR, IF;
terminal IMPLEMENTS, INT, INTERFACE, NEW, NEWARRAY, NULL, PRINTLN;
terminal READLN, RETURN, STRING, THIS, VOID, WHILE, PLUS, MINUS;
terminal MULT, DIV, MOD, LESS, LESSEQ, GREATER, GREATEREQ, EQUAL;
terminal NOTEQ, AND, OR, NOT, ASSIGNOP, SEMICOLON, COMMA, PERIOD;
terminal LEFTPAREN, RIGHTPAREN, LEFTBRACKET, RIGHTBRACKET;
terminal LEFTBRACE, RIGHTBRACE, INTCONSTANT, DOUBLECONSTANT;
terminal STRINGCONSTANT, BOOLEANCONSTANT, ID;

/* Non terminals */
nonterminal Program, Decl, DeclPlus, VariableDecl, Variable, Type;
nonterminal FunctionDecl, Formals, ClassDecl, Field;
nonterminal InterfaceDecl, Prototype, StmtBlock, Stmt;
nonterminal IfStmt, WhileStmt, ForStmt, BreakStmt;
nonterminal ReturnStmt, PrintStmt, Expr, Lvalue;
nonterminal Actuals, Constant, VariableDeclStar, LvaluenotID;
nonterminal FieldStar, IdCommPlus, PrototypeStar, StmtStar;
nonterminal VariableCommPlus, Call;

/* Precedences */
precedence left EQUAL;
precedence left OR;
precedence left AND;
precedence left EQUAL, NOTEQ;
precedence left LESS, LESSEQ, GREATER, GREATEREQ;
precedence left PLUS, MINUS;
precedence left MULT, DIV, MOD;
precedence left NOT;
precedence left ID;
precedence left LEFTBRACKET, PERIOD;
precedence left ELSE;
start with Program;

// #1
Program 			::= Decl:d DeclPlus: d2		{: RESULT = 101; System.out.print(reduction(d,d2)); :}												
;

// #2
DeclPlus 			::= Decl:d DeclPlus:d2 		{: RESULT = 201; System.out.print(reduction(d,d2)); :}
					|							{: RESULT = 202; :} 
;

// #2
Decl 				::= VariableDecl:v 		 	{: RESULT = ; System.out.print(reduction(v)); :}	
					| FunctionDecl:f 			{: RESULT = ; System.out.print(reduction(f)); :}
					| ClassDecl:c 				{: RESULT = ; System.out.print(reduction(c)); :}
					| InterfaceDecl:i			{: RESULT = ; System.out.print(reduction(i)); :}
					| Stmt:s					{: RESULT = ; System.out.print(reduction(s)); :} // added to accept 2nd test case
;

// #3
VariableDecl 		::= Variable:v SEMICOLON 			{: RESULT = 301; System.out.print(reduction(v) + shift("SEMICOLON")); :}
;

// #4
Variable 			::= Type:t ID				{: RESULT = 401; System.out.print(reduction(t) + shift("ID")); :}
					//| INT ID
					//| ID ID					{: RESULT = 402; System.out.print(shift("ID","ID")); :} // added to fix reduce reduce error between lvalue and type
		 			//| DOUBLE ID				{: RESULT = 403; System.out.print(shift("DOUBLE", "ID")); :}
;

// #5
Type 				::= INT										{: RESULT = 501; System.out.print(shift("INT")); :}
					| DOUBLE 									{: RESULT = 502; System.out.print(shift("DOUBLE")); :}
					| BOOLEAN 									{: RESULT = 503; System.out.print(shift("BOOLEAN")); :}
					| STRING 									{: RESULT = 504; System.out.print(shift("STRING")); :}
					| Type:t LEFTBRACKET RIGHTBRACKET			{: RESULT = 505; System.out.print(reduction(t) + shift("LEFTBRACKET", "RIGHTBRACKET")); :}
					//| Type:t LEFTBRACKET RIGHTBRACKET			{: RESULT = 505; System.out.print(reduction(t) + shift("LEFTBRACKET", "RIGHTBRACKET")); :}
					//| ID 										{: RESULT = 506; System.out.print(shift("ID")); :}
					//|											{: \* Do Nothing *\ :}
;

// #6
FunctionDecl 		::= Type:t ID LEFTPAREN Formals:f RIGHTPAREN StmtBlock:s		{: RESULT = 601; System.out.print(reduction(t) + shift("ID","LEFTPAREN") + reduction(f) + shift("RIGHTPAREN") + reduction(s)); :}
					| VOID ID LEFTPAREN Formals:f RIGHTPAREN StmtBlock:s			{: RESULT = 602; System.out.print(shift("VOID","ID","LEFTPAREN") + reduction(f) + shift("RIGHTPAREN") + reduction(s)); :}
					| ID ID LEFTPAREN Formals:f RIGHTPAREN StmtBlock:s				{: RESULT = 603; System.out.print(shift("ID","ID","LEFTPAREN") + reduction(f) + shift("RIGHTPAREN") + reduction(s)); :}
					//| Stmt:s														{: RESULT = 605; System.out.print(reduction(s)); :}
;

// #7
Formals 			::= Variable:v1	VariableCommPlus:v2			{: RESULT = 701; System.out.print(reduction(v1, v2)); :}
					|											{: RESULT = 702; :}
					//| DOUBLE ID	COMMA DOUBLE ID				{: RESULT = 703; System.out.print(shift("DOUBLE", "ID", "COMMA", "DOUBLE", "ID")); :}//input5.txt test
;

//
VariableCommPlus 	::= COMMA Variable:v1 VariableCommPlus:v2 	{: RESULT = ; System.out.print(shift("COMMA") + reduction(v1,v2)); :}
					|											{: RESULT = ; :}
;

//StmtBlock			::= LEFTBRACE VariableDeclStar:v /*stmtstar:s*/ RIGHTBRACE		{: RESULT = ; System.out.print(shift("LEFTBRACE") + reduction(v/*,s*/) + shift("RIGHTBRACE")); :}
	      			//| LEFTBRACE stmtstar:s RIGHTBRACE								{: RESULT = ; System.out.print(shift("LEFTBRACE") + reduction(s) + shift("RIGHTBRACE")); :}
					//| LEFTBRACE variabledeclstar:v RIGHTBRACE						{: RESULT = ; System.out.print(shift("LEFTBRACE") + reduction(v) + shift("RIGHTBRACE")); :}
					//| LEFTBRACE RIGHTBRACE										{: RESULT = ; System.out.print(shift("LEFTBRACE", "RIGHTBRACE")); :}
//;

// #8
ClassDecl			::= CLASS ID EXTENDS ID IMPLEMENTS ID IdCommPlus:i LEFTBRACE FieldStar:f RIGHTBRACE 	{: RESULT = 801; System.out.print(shift("CLASS","ID","EXTENDS","ID","IMPLEMENTS","ID") + reduction(i) + shift("LEFTBRACE") + reduction(f) + shift("RIGHTBRACE")); :}// FIXES '<>' PROBLEM
					| CLASS ID EXTENDS ID IMPLEMENTS ID IdCommPlus:i LEFTBRACE RIGHTBRACE					{: RESULT = 802; System.out.print(shift("CLASS","ID","EXTENDS","ID","IMPLEMENTS","ID") + reduction(i) + shift("LEFTBRACE") + shift("RIGHTBRACE")); :}
					| CLASS ID EXTENDS ID LEFTBRACE FieldStar:f RIGHTBRACE									{: RESULT = 803; System.out.print(shift("CLASS","ID","EXTENDS","ID","LEFTBRACE") + reduction(f) + shift("RIGHTBRACE")); :}
					| CLASS ID EXTENDS ID LEFTBRACE RIGHTBRACE												{: RESULT = 804; System.out.print(shift("CLASS","ID","EXTENDS","ID","LEFTBRACE","RIGHTBRACE")); :}
					| CLASS ID IMPLEMENTS ID IdCommPlus:i LEFTBRACE FieldStar:f RIGHTBRACE					{: RESULT = 805; System.out.print(shift("CLASS","ID","IMPLEMENTS","ID") + reduction(i) + shift("LEFTBRACE") + reduction(f) + shift("RIGHTBRACE"));:}
					| CLASS ID IMPLEMENTS ID IdCommPlus:i LEFTBRACE RIGHTBRACE								{: RESULT = 806; System.out.print(shift("CLASS","ID","IMPLEMENTS","ID") + reduction(i) + shift("LEFTBRACE", "RIGHTBRACE"));:}
					| CLASS ID LEFTBRACE FieldStar:f RIGHTBRACE												{: RESULT = 807; System.out.print(shift("CLASS","ID","LEFTBRACE") + reduction(f) + shift("RIGHTBRACE")); :}
					| CLASS ID LEFTBRACE RIGHTBRACE															{: RESULT = 808; System.out.print(shift("CLASS","ID","LEFTBRACE","RIGHTBRACE"));:}
;

//
FieldStar			::= Field:f1 FieldStar:f2 			{: RESULT = ; System.out.print(reduction(f1,f2)); :}// FIXES '*' PROBLEM
					| Field:f1							{: RESULT = ; System.out.print(reduction(f1)); :}
;

//
IdCommPlus			::= COMMA ID IdCommPlus:i			{: RESULT = ; System.out.print(shift("COMMA", "ID") + reduction(i)); :}// FIXES '+,' PROBLEM
	      			|									{: RESULT = ; :}
;

// #9
Field				::= Variable:v SEMICOLON 							{: RESULT = 901; System.out.print(reduction(v)); :}
					| FunctionDecl:f									{: RESULT = 902; System.out.print(reduction(f)); :}
;

// #10
InterfaceDecl		::= INTERFACE ID LEFTBRACE PrototypeStar:p RIGHTBRACE		{: RESULT = 1001; System.out.print(shift("INTERFACE", "ID", "LEFTBRACE") + reduction(p) + shift("RIGHTBRACE")); :}
					| INTERFACE ID LEFTBRACE RIGHTBRACE							{: RESULT = 1002; System.out.print(shift("INTERFACE", "ID", "LEFTBRACE", "RIGHTBRACE")); :}
;

//
PrototypeStar		::= Prototype:p1 PrototypeStar:p2 						{: RESULT = ; System.out.print(reduction(p1,p2)); :} // FIXED '*' PROBLEM
					| Prototype:p1											{: RESULT = ; System.out.print(reduction(p1)); :}
;

// #11
Prototype			::= Type:t ID LEFTPAREN Formals:f RIGHTPAREN SEMICOLON			{: RESULT = 1101; System.out.print(reduction(t) + shift("ID", "LEFTPAREN") + reduction(f) + shift("RIGHTPAREN","SEMICOLON"));:}
					| VOID ID LEFTPAREN Formals:f RIGHTPAREN SEMICOLON				{: RESULT = 1102; System.out.print(shift("VOID", "ID", "LEFTPAREN") + reduction(f) + shift("RIGHTPAREN","SEMICOLON"));:}
;

// #12
StmtBlock			::= LEFTBRACE VariableDeclStar:v StmtStar:s RIGHTBRACE		{: RESULT = 1201; System.out.print(shift("LEFTBRACE") + reduction(v,s) + shift("RIGHTBRACE")); :}
	     			| LEFTBRACE StmtStar:s RIGHTBRACE							{: RESULT = 1202; System.out.print(shift("LEFTBRACE") + reduction(s) + shift("RIGHTBRACE")); :}
					| LEFTBRACE VariableDeclStar:v RIGHTBRACE					{: RESULT = 1203; System.out.print(shift("LEFTBRACE") + reduction(v) + shift("RIGHTBRACE")); :}
	    			| LEFTBRACE RIGHTBRACE										{: RESULT = 1204; System.out.print(shift("LEFTBRACE", "RIGHTBRACE"));:}
	      
;

VariableDeclStar	::= VariableDeclStar:v1 Variable:v2 SEMICOLON			{: RESULT = ; System.out.print(reduction(v1,v2)); :} 
					| Variable:v SEMICOLON // variabledecl:v1				{: RESULT = ; System.out.print(reduction(v1)); :}
;

StmtStar			::= Stmt:s1 StmtStar:s2 							{: RESULT = ; System.out.print(reduction(s1,s2)); :}
					| Stmt:s1											{: RESULT = ; System.out.print(reduction(s1)); :}
;

// #13
Stmt				::= Expr:e SEMICOLON 								{: RESULT = 1301; System.out.print(reduction(e) + shift("SEMICOLON")); :} 
					| SEMICOLON 		 								{: RESULT = 1302; System.out.print(shift("SEMICOLON")); :} 
					| Constant:c Expr:e SEMICOLON 						{: RESULT = 1303; System.out.print(reduction(c)+ reduction(e) + shift("SEMICOLON")); :} 
					//| Type:t Expr:e SEMICOLON 						{: RESULT = 1303; System.out.print(reduction(t) + reduction(e) + shift("SEMICOLON")); :} 
					| INT Expr:e SEMICOLON 								{: RESULT = 1304; System.out.print(shift("INT") + reduction(e) + shift("SEMICOLON")); :}
					| DOUBLE Expr:e SEMICOLON 							{: RESULT = 1304; System.out.print(shift("DOUBLE") + reduction(e) + shift("SEMICOLON")); :}
					| IfStmt:i			 								{: RESULT = 1303; System.out.print(reduction(i)); :} 
					| WhileStmt:w			 							{: RESULT = 1304; System.out.print(reduction(w)); :} 
					| ForStmt:f			 								{: RESULT = 1305; System.out.print(reduction(f)); :} 
					| BreakStmt:b			 							{: RESULT = 1306; System.out.print(reduction(b)); :} 
					| ReturnStmt:r			 							{: RESULT = 1307; System.out.print(reduction(r)); :} 
					| PrintStmt:p			 							{: RESULT = 1308; System.out.print(reduction(p)); :} 
					| StmtBlock:s			 							{: RESULT = 1309; System.out.print(reduction(s)); :} 
;

//VariableDeclStar	::= VariableDeclStar:v1 Variable:v2 SEMICOLON	 	{: RESULT = ; System.out.print(reduction(v1,v2)); :} 
					//| Variable:v SEMICOLON // VariableDecl:v1 		{: RESULT = ; System.out.print(reduction(v1)); :}
//;

// #20
Expr				::= Lvalue:l EQUAL Expr:e							{: RESULT = 2001; System.out.print(reduction(l) + shift("EQUAL")+reduction(e)); :} 
					//| Lvalue:l EQUAL Constant:c						{: RESULT = 2007; System.out.print(reduction(l) + shift("EQUAL")+reduction(c)); :}
					| Constant:c										{: RESULT = 2002; System.out.print(reduction(c)); :}
					| Lvalue:l											{: RESULT = 2003; System.out.print(reduction(l)); :}
					//| Expr:e1 AND Expr:e2								{: RESULT = 2004; System.out.print(reduction(e1) + shift("AND") + reduction(e2)); :}
					//| ID												{: RESULT = 2025; System.out.print(shift("ID")); :}
					// | Constant and other things
					// | Expr + Expr
					// | Expr:e1 EQUAL Expr:e2							{: RESULT = 2027; System.out.print(reduction(e1) + shift("EQUAL") + reduction(e2)); :} 
;

// #21
Lvalue				::= ID												{: RESULT = 2101; System.out.print(shift("ID")); :}
					| Lvalue:l LEFTBRACKET Expr:e RIGHTBRACKET			{: RESULT = 2102; System.out.print(reduction(l) + shift("LEFTBRACKET") + reduction(e) + shift("RIGHTBRACKET")); :}
					| Lvalue:l PERIOD ID								{: RESULT = 2104; System.out.print(reduction(l) + shift("PERIOD", "ID")); :} 
					//| ID PERIOD ID
					//| ID LEFTBRACKET Expr:e RIGHTBRACKET
					//| LvaluenotID:l									{: RESULT = 2109; System.out.print(reduction(l)); :}
;

// #22
Call				::= ID LEFTPAREN Actuals:a RIGHTPAREN				{: RESULT = 2201; System.out.print(shift("ID", "LEFTPAREN") + reduction(a) + shift("RIGHTAPREN")); :}
					| ID PERIOD ID LEFTPAREN Actuals:a RIGHTPAREN		{: RESULT = 2202; System.out.print(shift("ID", "PERIOD", "ID", "LEFTPAREN") + reduction(a) + shift("RIGHTAPREN")); :} 
;

//# 23
Actuals				::= Expr:e1 COMMA Expr:e2							{: RESULT = 2301; System.out.print(reduction(e1) + reduction(e2)); :}
            		| 
;

// #24         
Constant			::= INTCONSTANT										{: RESULT = 2401; System.out.println("INTCONSTANT [shift]"); :} 
					| DOUBLECONSTANT									{: RESULT = 2402; System.out.println("DOUBLECONSTANT [shift]"); :} 
					| STRINGCONSTANT									{: RESULT = 2403; System.out.println("STRINGCONSTANT [shift]"); :} 
					| BOOLEANCONSTANT									{: RESULT = 2404; System.out.println("BOOLEANCONSTANT [shift]"); :} 
					| NULL												{: RESULT = 2405; System.out.println("NULL [shift]"); :}
;